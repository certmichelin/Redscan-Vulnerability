/**
 * Michelin CERT 2020.
 */

package com.michelin.cert.redscan;

import com.michelin.cert.redscan.utils.datalake.DatalakeStorageException;
import com.michelin.cert.redscan.utils.models.Alert;
import com.michelin.cert.redscan.utils.models.Vulnerability;

import java.text.SimpleDateFormat;
import java.util.Date;

import kong.unirest.json.JSONObject;

import org.apache.logging.log4j.LogManager;

import org.springframework.amqp.rabbit.annotation.RabbitListener;
import org.springframework.amqp.rabbit.core.RabbitTemplate;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

/**
 * RedScan scanner main class.
 *
 * @author Maxime ESCOURBIAC
 * @author Sylvain VAISSIER
 * @author Maxence SCHMITT
 */
@SpringBootApplication
public class ScanApplication {

  //Only required if pushing data to queues
  private final RabbitTemplate rabbitTemplate;

  private final SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd kk:mm");

  @Autowired
  private DatalakeConfig datalakeConfig;

  /**
   * Constructor to init rabbit template. Only required if pushing data to queues
   *
   * @param rabbitTemplate Rabbit template.
   */
  public ScanApplication(RabbitTemplate rabbitTemplate) {
    this.rabbitTemplate = rabbitTemplate;
  }

  /**
   * RedScan Main methods.
   *
   * @param args Application arguments.
   */
  public static void main(String[] args) {
    SpringApplication.run(ScanApplication.class, args);
  }

  /**
   * Message executor.
   *
   * @param message Message received.
   */
  @RabbitListener(queues = {RabbitMqConfig.QUEUE_VULNERABILITIES})
  public void receiveMessage(String message) {

    LogManager.getLogger(ScanApplication.class).info(String.format("Received Vulnerability : %s", message));

    //Check if the vulnerability is already existing.
    Vulnerability vulnerability = new Vulnerability(message);
    Alert alert = null;

    try {
      JSONObject vuln = datalakeConfig.getVulnerability(vulnerability.getId());
      if (vuln == null) {

        LogManager.getLogger(ScanApplication.class).info(String.format("Vulnerability not found : %s", vulnerability.getId()));
        //Create vulnerability and assign default values.
        datalakeConfig.createVulnerability(vulnerability.getId());
        datalakeConfig.upsertVulnerabilityField(vulnerability.getId(), "acknowledged", false);
        datalakeConfig.upsertVulnerabilityField(vulnerability.getId(), "fixed", false);
        datalakeConfig.upsertVulnerabilityField(vulnerability.getId(), "false_positive", false);
        datalakeConfig.upsertVulnerabilityField(vulnerability.getId(), "creation_date", fromDate(new Date()));
        datalakeConfig.upsertVulnerabilityField(vulnerability.getId(), "last_view_date", fromDate(new Date()));
        datalakeConfig.upsertVulnerabilityField(vulnerability.getId(), "severity", vulnerability.getSeverity());
        datalakeConfig.upsertVulnerabilityField(vulnerability.getId(), "title", vulnerability.getTitle());
        datalakeConfig.upsertVulnerabilityField(vulnerability.getId(), "message", vulnerability.getMessage());
        datalakeConfig.upsertVulnerabilityField(vulnerability.getId(), "url", vulnerability.getUrl());
        datalakeConfig.upsertVulnerabilityField(vulnerability.getId(), "origin", vulnerability.getOrigin());
        alert = vulnerability.toAlert();
      } else {

        LogManager.getLogger(ScanApplication.class).info(String.format("Vulnerability already exist : %s", vulnerability.getId()));
        boolean fixed = vuln.getBoolean("fixed");
        if (fixed) {

          boolean falsePositive = vuln.getBoolean("false_positive");
          if (!falsePositive) {

            LogManager.getLogger(ScanApplication.class).info(String.format("Reopen vulnerability : %s", vulnerability.getId()));
            datalakeConfig.upsertVulnerabilityField(vulnerability.getId(), "acknowledged", false);
            datalakeConfig.upsertVulnerabilityField(vulnerability.getId(), "fixed", false);
            datalakeConfig.upsertVulnerabilityField(vulnerability.getId(), "severity", vulnerability.getSeverity());
            datalakeConfig.upsertVulnerabilityField(vulnerability.getId(), "title", vulnerability.getTitle());
            datalakeConfig.upsertVulnerabilityField(vulnerability.getId(), "message", vulnerability.getMessage());
            datalakeConfig.upsertVulnerabilityField(vulnerability.getId(), "url", vulnerability.getUrl());
            datalakeConfig.upsertVulnerabilityField(vulnerability.getId(), "origin", vulnerability.getOrigin());
            datalakeConfig.upsertVulnerabilityField(vulnerability.getId(), "last_view_date", fromDate(new Date()));
            alert = vulnerability.toAlert();
          } else {

            LogManager.getLogger(ScanApplication.class).info(String.format("False positive detected again : %s", vulnerability.getId()));
            datalakeConfig.upsertVulnerabilityField(vulnerability.getId(), "last_view_date", fromDate(new Date()));
          }
        } else {

          LogManager.getLogger(ScanApplication.class).info(String.format("Update vulnerability : %s", vulnerability.getId()));
          datalakeConfig.upsertVulnerabilityField(vulnerability.getId(), "severity", vulnerability.getSeverity());
          datalakeConfig.upsertVulnerabilityField(vulnerability.getId(), "title", vulnerability.getTitle());
          datalakeConfig.upsertVulnerabilityField(vulnerability.getId(), "message", vulnerability.getMessage());
          datalakeConfig.upsertVulnerabilityField(vulnerability.getId(), "url", vulnerability.getUrl());
          datalakeConfig.upsertVulnerabilityField(vulnerability.getId(), "origin", vulnerability.getOrigin());
          datalakeConfig.upsertVulnerabilityField(vulnerability.getId(), "last_view_date", fromDate(new Date()));
        }
      }

      if (alert != null) {
        rabbitTemplate.convertAndSend(RabbitMqConfig.FANOUT_ALERTS_EXCHANGE_NAME, "", alert.toJson());
      }
    } catch (DatalakeStorageException ex) {
      LogManager.getLogger(ScanApplication.class).error(String.format("DatalakeStorage exception : %s", ex.getMessage()));
    } catch (Exception ex){
      LogManager.getLogger(ScanApplication.class).error(String.format("Exception : %s", ex.getMessage()));
    }
  }

  /**
   * Convert Date to String.
   *
   * @param date Date to convert.
   * @return Date converted in String.
   */
  private String fromDate(Date date) {
    return (date != null) ? sdf.format(date) : null;
  }

}
