/*
 * Copyright 2021 Michelin CERT (https://cert.michelin.com/)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.michelin.cert.redscan;

import com.michelin.cert.redscan.utils.models.reports.Alert;
import com.michelin.cert.redscan.utils.models.reports.Vulnerability;

import java.util.Date;

import org.apache.logging.log4j.LogManager;

import org.springframework.amqp.rabbit.annotation.RabbitListener;
import org.springframework.amqp.rabbit.core.RabbitTemplate;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

/**
 * RedScan scanner main class.
 *
 * @author Maxime ESCOURBIAC
 * @author Sylvain VAISSIER
 * @author Maxence SCHMITT
 */
@SpringBootApplication
public class ScanApplication {

  //Only required if pushing data to queues
  private final RabbitTemplate rabbitTemplate;

  /**
   * Constructor to init rabbit template. Only required if pushing data to queues
   *
   * @param rabbitTemplate Rabbit template.
   */
  public ScanApplication(RabbitTemplate rabbitTemplate) {
    this.rabbitTemplate = rabbitTemplate;
  }

  /**
   * RedScan Main methods.
   *
   * @param args Application arguments.
   */
  public static void main(String[] args) {
    SpringApplication.run(ScanApplication.class, args);
  }

  /**
   * Message executor.
   *
   * @param message Message received.
   */
  @RabbitListener(queues = {RabbitMqConfig.QUEUE_VULNERABILITIES})
  public void receiveMessage(String message) {

    LogManager.getLogger(ScanApplication.class).info(String.format("Received Vulnerability : %s", message));

    //Check if the vulnerability is already existing.
    Vulnerability receivedVulnerability = new Vulnerability();
    receivedVulnerability.fromJson(message);

    Alert alert = null;

    try {
      Vulnerability vulnerability = new Vulnerability().find(receivedVulnerability.getId());
      if (vulnerability == null) {

        LogManager.getLogger(ScanApplication.class).info(String.format("Vulnerability not found : %s", receivedVulnerability.getId()));
        //Create vulnerability and assign default values.
        receivedVulnerability.setAcknowledged(false);
        receivedVulnerability.setFixed(false);
        receivedVulnerability.setFalsePositive(false);
        receivedVulnerability.setCreationDate(new Date());
        receivedVulnerability.setLastViewDate(new Date());
        receivedVulnerability.create();
        alert = receivedVulnerability.toAlert();
      } else {

        LogManager.getLogger(ScanApplication.class).info(String.format("Vulnerability already exist : %s", receivedVulnerability.getId()));
        if (vulnerability.isFixed()) {

          if (!vulnerability.isFalsePositive()) {

            LogManager.getLogger(ScanApplication.class).info(String.format("Reopen vulnerability : %s", receivedVulnerability.getId()));
            vulnerability.setFixed(false);
            vulnerability.setAcknowledged(false);
            vulnerability.setSeverity(receivedVulnerability.getSeverity());
            vulnerability.setTitle(receivedVulnerability.getTitle());
            vulnerability.setMessage(receivedVulnerability.getMessage());
            vulnerability.setUrl(receivedVulnerability.getUrl());
            vulnerability.setOrigin(receivedVulnerability.getOrigin());
            vulnerability.setData(receivedVulnerability.getData());
            vulnerability.setLastViewDate(new Date());
            vulnerability.upsert();
            alert = vulnerability.toAlert();
          } else {
            LogManager.getLogger(ScanApplication.class).info(String.format("False positive detected again : %s", receivedVulnerability.getId()));
            vulnerability.setLastViewDate(new Date());
            vulnerability.upsert();
          }
        } else {
          LogManager.getLogger(ScanApplication.class).info(String.format("Update vulnerability : %s", receivedVulnerability.getId()));
          vulnerability.setSeverity(receivedVulnerability.getSeverity());
          vulnerability.setTitle(receivedVulnerability.getTitle());
          vulnerability.setMessage(receivedVulnerability.getMessage());
          vulnerability.setUrl(receivedVulnerability.getUrl());
          vulnerability.setOrigin(receivedVulnerability.getOrigin());
          vulnerability.setData(receivedVulnerability.getData());
          vulnerability.setLastViewDate(new Date());
          vulnerability.upsert();
        }
      }

      if (alert != null) {
        rabbitTemplate.convertAndSend(alert.getFanoutExchangeName(), "", alert.toJson());
      }
    } catch (Exception ex) {
      LogManager.getLogger(ScanApplication.class).error(String.format("Exception : %s", ex.getMessage()));
    }
  }
}
